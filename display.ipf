#pragma rtGlobals=1		// Use modern global access method.// display.ipf// killaxesFunction killaxes()	ModifyGraph noLabel=2,axThick=0end//swap table rowscolsFunction transposetable ()	modifytable elements=(-3,-2,-1,-1)endFunction ref ()	SVAR currentmovie = root:Currentmovie	String refname = currentmovie + "ref"	dowindow/f $refname	if (!V_flag)			if (!WaveExists(referencefordivision))			newimage/S=0 root:mv1001:referencefordivision		else			WAVE referencefordivision			newimage/s=0 referencefordivision		endif		killaxes()		//ColorScale/C/N=text100/F=0/B=1/D=0.1/A=MC image=referencefordivision		//dowindow/c $refname	endif	end// iMontage// creates a layout with images that span a range of frames.  User is prompted for starting and ending points, and//	"increment."  Function will display every nth frame, where n is the "increment"Function iMontage([montageinfowave])	Wave montageinfowave		Variable start, stop, increment, threshold	 String moviename	 		if (ParamIsDefault(montageinfowave))		Prompt start, "starting point (ms)"		Prompt stop, "ending point (ms)"		Prompt increment, "increment (ms)"	 	Prompt moviename, "3D matrix containing movie", popup, WaveList("*mv*",";","")			DoPrompt "enter info", moviename, start, stop, increment		if (V_flag)			abort		endif	else		moviename = GetDataFolder(0)		start = montageinfowave[0]		stop = montageinfowave[1]		increment = montageinfowave[2]	endif		NVAR numsdevs	printf "montage from %g ms to %g ms on movie %s with threshold %d stdevs\r", start, stop,moviename,numsdevs	WAVE movie = $moviename	WAVE colors //,peakcolors	NVAR timeresolution		moviedims(movie)	NVAR height,width, length		Variable startframe = (start - dimoffset(movie,2))/timeresolution	Variable stopframe = (stop - dimoffset(movie,2))/timeresolution	increment = increment/timeresolution		String name = NameOfWave(movie)	String topgraph		Variable i	String ms, framename			string layoutname = moviename + "_" + num2str(startframe) + "to" + num2str(stopframe)	dowindow/f $layoutname	if (!V_flag)		NewLayout/P=landscape		dowindow/c $layoutname	endif		Variable moviestart = dimoffset(movie,2)	// not sure why these round statements are necessary, but without them the for loop doesn't work right	//	when time resolution is less than 1 (untested with other time resolutions)	startframe = round(startframe)	stopframe = round(stopframe)	increment = round(increment)		for (i = startframe; i <= stopframe; i += increment)				if (timeresolution < 1)			framename =  moviename + "_" + num2str(i) +"frm"		else			framename =  moviename + "_" + num2str(i*timeresolution + dimoffset(movie,2)) +"ms"		endif		//print i		make/o/n=(height,width) $framename = movie[p][q][i]		setscale/p x, dimoffset(movie,0),dimdelta(movie,0), $framename		setscale/p y, dimoffset(movie,1),dimdelta(movie,1), $framename		wave frame = $framename		//sdthresholdframe(frame)				String windowname = framename + "_w"		dowindow/f $windowname		// if this window doesn't already exist, make it		if (!V_flag)							NewImage/S=0 referencefordivision			AppendImage/T frame			ModifyImage $framename cindex = colorwave,minRGB=NaN,maxRGB=NaN			ModifyGraph noLabel(left)=2,axThick(left)=0			ModifyGraph noLabel=2,axThick=0			dowindow/c/r $windowname			//pub()			topgraph = WinName(0,1)			AppendLayoutObject/F=0/T=1 graph $topgraph								endif		// what if the frames exist but the layout doesn't?		DoUpdate					//print increment			endfor	Execute "Tile"end// frames// just like imontage except doesn't do layout and gives option for a suffix to go on each wave and window// creates a layout with images that span a range of frames.  User is prompted for starting and ending points, and//	"increment."  Function will display every nth frame, where n is the "increment"Function frames([start,stop, increment,moviename, suffix,flatavg,slot])	variable start,stop,increment,flatavg,slot	string moviename	string suffix		 		if (ParamIsDefault(start))		Prompt start, "starting point (ms)"		Prompt stop, "ending point (ms)"		Prompt increment, "increment (ms)"	 	Prompt moviename, "3D matrix containing movie", popup, WaveList("*mv*",";","MINLAYERS:2")		prompt suffix, "suffix"		prompt flatavg, "NxN avg frame?"		prompt slot, "screen slot (0-7)"				DoPrompt "enter info", moviename, suffix, flatavg, start, stop, increment,slot		if (V_flag)			abort		endif	else		printf "displaying %s from %d to %d delta %d, with spaceavg = %d and suffix %s\r", moviename,start,stop,increment,flatavg,suffix	endif	NVAR numsdevs	WAVE movie = $moviename	WAVE colors //,peakcolors	NVAR twophoton		variable timeresolution = dimdelta(movie,2)		moviedims(movie)	NVAR height,width, length		Variable startframe = (start - dimoffset(movie,2))/timeresolution	Variable stopframe = (stop - dimoffset(movie,2))/timeresolution	increment = increment/timeresolution		if (stringmatch(moviename, "*ld*") || stringmatch(moviename, "*cd*") || stringmatch(moviename, "*pd*"))		WAVE colorwave=root:rescolors	else 			WAVE colorwave=colors	endif			String name = NameOfWave(movie)	String topgraph		Variable i	String ms, framename, displaycmd		Variable moviestart = dimoffset(movie,2)	// not sure why these round statements are necessary, but without them the for loop doesn't work right	//	when time resolution is less than 1 (untested with other time resolutions)	startframe = round(startframe)	stopframe = round(stopframe)	increment = round(increment)		displaycmd = "TileWindows/A=(1,0)/W=(16,150*" + num2str(slot)+",1800,150*" + num2str(slot+1) + ")"		for (i = startframe; i <= stopframe; i += increment)				if (timeresolution < 1)			framename =  moviename + "_" + num2str(i) +"frm" + suffix		else			framename =  moviename + "_" + num2str(i*timeresolution + dimoffset(movie,2)) +"ms" + suffix		endif		//print i		make/o/n=(height,width) $framename = movie[p][q][i]		setscale/p x, dimoffset(movie,0),dimdelta(movie,0), $framename		setscale/p y, dimoffset(movie,1),dimdelta(movie,1), $framename		wave frame = $framename				if (flatavg != 0)			MatrixFilter/N=(flatavg) avg frame		endif				String windowname = framename + "_w"		dowindow/f $windowname		// if this window doesn't already exist, make it		if (!V_flag)							if (WaveExists(referencefordivision))				NewImage/S=0 referencefordivision				AppendImage/T frame				ModifyImage $framename cindex =colorwave,minRGB=NaN,maxRGB=NaN				//ModifyImage ''#1 ctab= {*,100,YellowHot,0},minRGB=Nan, maxRGB=0				ModifyGraph noLabel=2,axThick=0			else				NewImage/S=0 frame				//ModifyImage $framename cindex =colorwave,minRGB=NaN,maxRGB=NaN				ModifyImage ''#0 cindex=colors,minRGB=Nan, maxRGB=NaN				ModifyGraph noLabel=2,axThick=0			endif										dowindow/c/r $windowname			//pub()			topgraph = WinName(0,1)		endif		// what if the frames exist but the layout doesn't?		DoUpdate				displaycmd += (windowname + ", ")								endfor			execute/Z displaycmd	//Execute "Tile"end// frameslist// just like frames except can take a comma-separated list of random frames rather than an equally spaced incrementFunction frameslist([frameliststring,moviename, suffix,flatavg,slot])	variable flatavg,slot	string frameliststring, moviename	string suffix		 		if (ParamIsDefault(frameliststring))		Prompt frameliststring, "comma-separated list of frames"	 	Prompt moviename, "3D matrix containing movie", popup, WaveList("*mv*",";","MINLAYERS:2")		prompt suffix, "suffix"		prompt flatavg, "NxN avg frame?"		prompt slot, "screen slot (0-7)"				DoPrompt "enter info", moviename, suffix, flatavg, frameliststring, slot		if (V_flag)			abort		endif		printf "displaying %s from %s with spaceavg = %d and suffix %s\r", frameliststring, moviename, flatavg,suffix	else		printf "displaying %s from %s with spaceavg = %d and suffix %s\r", frameliststring,flatavg,suffix	endif	NVAR numsdevs	WAVE movie = $moviename	WAVE colors //,peakcolors	NVAR timeresolution		moviedims(movie)	NVAR height,width, length		parseliststring(frameliststring)	WAVE numberlist	Variable numframes = numpnts(numberlist)	Variable framenumber		if (stringmatch(moviename, "*ld*") || stringmatch(moviename, "*cd*") || stringmatch(moviename, "*pd*"))		WAVE colorwave=root:rescolors	else 			WAVE colorwave=colors	endif			String name = NameOfWave(movie)	String topgraph		Variable i	String ms, framename, displaycmd		Variable moviestart = dimoffset(movie,2)	displaycmd = "TileWindows/A=(1,0)/W=(16,150*" + num2str(slot)+",1800,150*" + num2str(slot+1) + ")"		for (i = 0; i < numframes; i += 1)						framenumber = round((numberlist[i] - dimoffset(movie,2))/timeresolution)						if (timeresolution < 1)			framename =  moviename + "_" + num2str(framenumber) +"frm" + suffix		else			framename =  moviename + "_" + num2str(framenumber*timeresolution + dimoffset(movie,2)) +"ms" + suffix		endif		//print i		make/o/n=(height,width) $framename = movie[p][q][framenumber]		setscale/p x, dimoffset(movie,0),dimdelta(movie,0), $framename		setscale/p y, dimoffset(movie,1),dimdelta(movie,1), $framename		wave frame = $framename				if (flatavg != 0)			MatrixFilter/N=(flatavg) avg frame		endif				String windowname = framename + "_w"		dowindow/f $windowname		// if this window doesn't already exist, make it		if (!V_flag)							NewImage/S=0 referencefordivision			AppendImage/T frame			ModifyImage $framename cindex =colorwave,minRGB=NaN,maxRGB=NaN			ModifyGraph noLabel(left)=2,axThick(left)=0			ModifyGraph noLabel=2,axThick=0			dowindow/c/r $windowname			//pub()			topgraph = WinName(0,1)								endif		// what if the frames exist but the layout doesn't?		DoUpdate				displaycmd += (windowname + ", ")								endfor			execute/Z displaycmd	//Execute "Tile"endFunction singlemont (movie, start, increment, stop)	Wave movie	Variable start, increment, stop		Variable i	String name	NVAR timeresolution		for (i = start; i <= stop; i += increment)			name = nameofwave(movie) + "frame" + num2str(i) + "ms"		make/n=(96,64)$name = movie[p][q][i/timeresolution]		newimage $name		modifyimage $name cindex=colors			endfor	endFunction hist10v40()	String tenname,fortyname		Prompt tenname, "10 Hz movie"	Prompt fortyname, "40 Hz movie"	DoPrompt "gimme gimme", tenname, fortyname		tenname += "histo"	fortyname += "histo"		String animalnumber = tenname[0,2]	WAVE ten = $tenname	WAVE forty = $fortyname		Display ten, forty	ModifyGraph mode=5	ModifyGraph rgb($tenname)=(0,0,65535),rgb($fortyname)=(65535,0,0)	dowindow/r/c $(animalnumber + "histos")	SetAxis bottom 0,1.2	end // groovy little function to clean up axes in top graphFunction pub ()	ModifyGraph axthick=0, nolabel=2	SetAxis top 5,92	//SetAxis bottom 5,92 	SetAxis/R left 63,1end// makes a referenceframe with  500 um scalebars for inclusion in exports to illustrator/photoshopFunction scalebarref ()	Display /W=(145,150,618,529)	AppendImage/T/L referencefordivision	ModifyImage referencefordivision ctab= {*,*,Grays,0}	ModifyGraph margin(left)=-1,margin(bottom)=-1,margin(top)=-1,margin(right)=-1	ModifyGraph mirror=2	ModifyGraph nticks(left)=4	ModifyGraph minor=1	ModifyGraph noLabel=2	ModifyGraph fSize=9	ModifyGraph standoff=0	ModifyGraph axThick=0	ModifyGraph tkLblRot(left)=90	ModifyGraph btLen=3	ModifyGraph tlOffset=-2	SetAxis/R left 59,0	SetAxis top 0,85.9999999999999	SetDrawLayer UserFront	SetDrawEnv gstart	SetDrawEnv xcoord= top,ycoord= left,linethick= 3	DrawLine 63.1026665407906,1.12032847326963,84.6568066681792,1.12032847326963	SetDrawEnv xcoord= top,ycoord= left,linethick= 3	DrawLine 84.6924763828085,1.20782726045888,84.6924763828085,23.6873594242014	SetDrawEnv gstopEndMacro// add horizontal and vertical 500 um scale bars to top frame (assumes MiCam and 4x magnification)Function scalebars()	SetDrawLayer UserFront	SetDrawEnv gstart	SetDrawEnv xcoord= top,ycoord= left,linethick= 3	DrawLine 63.1026665407906,1.12032847326963,84.6568066681792,1.12032847326963	SetDrawEnv xcoord= top,ycoord= left,linethick= 3	DrawLine 84.6924763828085,1.20782726045888,84.6924763828085,23.6873594242014	SetDrawEnv gstopEndMacroFunction vline (ms)	Variable ms		setdrawenv xcoord=bottom, ycoord=prel, linethick= 1,dash=1	drawline ms, 0, ms, 1endFunction hline (level)	Variable level		setdrawenv xcoord=prel, ycoord=left, linethick= 1,dash=1	drawline 0, level, 1, levelendFunction hline_right (level)	Variable level		setdrawenv xcoord=prel, ycoord=right, linethick= 1,dash=1	drawline 0, level, 1, levelendFunction bottomscalebar (startx, endx, word)	Variable startx,endx	String word		setdrawenv xcoord=bottom, ycoord=prel, linethick= 2	drawline startx, 0.965,endx,0.965	setdrawenv fname= "Myriad Roman", fsize=12,fstyle=0,xcoord=bottom	drawtext (startx + (endx-startx)*1/2), 0.944, word	endFunction leftscalebar (starty, endy, word)	Variable starty, endy	String word		setdrawenv xcoord=prel, ycoord=left, linethick= 2	drawline 0.0125,starty,0.0125, endy	setdrawenv fname= "Myriad Roman", fsize=12,fstyle=0,ycoord=left	drawtext 0.0245, starty+(starty-endy)*-1/2, word	endFunction bar()	SetDrawEnv fstyle= 1	SetDrawEnv fsize= 24	SetDrawEnv xcoord= top,ycoord= left,linethick= 3.00	SetDrawEnv fstyle= 1,fsize= 16;DelayUpdate	DrawText 0.133037694013304,0.981818181818182,"500 um"	SetDrawEnv xcoord= top,ycoord= leftEndFunction MarkerOfWave(wv,instance)	Wave wv	Variable instance		Variable marker	String info=TraceInfo("",NameOfWave(wv),instance)		marker= GetNumFromModifyStr(info,"marker","",0)		return markerEndFunction YOffsetOfWave(wv,instance)	Wave wv	Variable instance		Variable offset	String info=TraceInfo("",NameOfWave(wv),instance)		offset= GetNumFromModifyStr(info,"offset","{",1)		return offsetEndFunction XOffsetOfWave(wv,instance)	Wave wv	Variable instance		Variable offset	String info=TraceInfo("",NameOfWave(wv),instance)		offset= GetNumFromModifyStr(info,"offset","{",0)		return offsetEnd// makes a color scale in its own little window for publication purposesFunction freescale (colorwave)	Wave colorwave		SVAR moviename = root:currentmovie		display	ColorScale/N=text0/F=0/B=1/X=64.27/Y=-2.37	ColorScale/C/N=text0 cindex=colorwave, minor=0,frame=0.00,tickThick=0.00, vert=0, height=5	dowindow/C $(nameofwave(colorwave)+"_w")	//ModifyGraph noLabel=2,axThick(left)=0	//ModifyGraph axThick=0	if (!cmpstr(NameOfWave(colorwave), "colors"))		ColorScale/C/N=text0 prescaleExp=2		AppendText "\\Z14\\f01% \\F'Symbol'D\\F'Geneva'F/F"	endif		if(!cmpstr(NameOfWave(colorwave), "timecolors"))		AppendText "\\Z14\\f01 ms"	endifendFunction makediscreteversion (ctabname,nlevels)	string ctabname	Variable nlevels	colortab2wave $ctabname	WAVE M_colors	make/n=(nlevels,3)/O  $(ctabname + "wave")	wave newcolorwave = $(ctabname + "wave")	Variable numlevelsold = dimsize(M_colors,0) 	variable levelsratio = floor(numlevelsold/nlevels)	print levelsratio	newcolorwave = M_colors[levelsratio*p][q]endFunction gethistoaxes ()	dowindow/f histowindow		if (!V_flag)		abort "need histowindow!"	endif	String currentfolder = GetDataFolder(1)	Setdatafolder root:		getaxis/q left	// left axis is inverted		Variable/g  leftmax = V_max	Variable/g  leftmin = V_min		getaxis/q top	// top axis is inverted		Variable/g  topmax = V_max	Variable/g  topmin = V_min		setdatafolder $currentfolder		endFunction adjustscaletomatchhisto (image)	Wave image			String currentfolder = GetDataFolder(1)	Setdatafolder root:		if (!Exists("topmax"))		gethistoaxes()	endif			NVAR leftmax,leftmin,topmax,topmin	setscale/P y,  leftmax , 0.023, "mm", image	setscale/P x,  topmin, 0.023, "mm", image  	setdatafolder $currentfolderend// moves a movie to the left or rightFunction shiftside (shiftee, howfar)	Wave shiftee	Variable howfar		duplicate/O shiftee backup		if (DimSize(shiftee,2))		shiftee[][][] = backup[p+howfar][q][r]	else		shiftee[][] = backup[p+howfar][q]	endif		killwaves backup	endFunction cleartraces()	string tracenames = tracenamelist("",";",1)	variable numtraces = itemsinlist(tracenames),i	for (i=0; i < numtraces; i += 1)			removefromgraph $(stringfromlist(i,tracenames))	endfor	end	// contour montage// puts up a set of contours at the specified SD level// if no window specified, looks for a window named "contours" to put them on and creates it if it doesn't existFunction contage (SDlevel,[montageinfowave, windowname])	Wave montageinfowave	Variable SDlevel	string windowname		Variable start, stop, increment, threshold	 String moviename	 		if (ParamIsDefault(montageinfowave))		Prompt start, "starting point (ms)"		Prompt stop, "ending point (ms)"		Prompt increment, "increment (ms)"	 	Prompt moviename, "3D matrix containing movie", popup, WaveList("*mv*",";","")			DoPrompt "enter info", moviename, start, stop, increment		if (V_flag)			abort		endif	else		moviename = GetDataFolder(0)		start = montageinfowave[0]		stop = montageinfowave[1]		increment = montageinfowave[2]	endif		if (ParamisDefault(windowname))			dowindow/f contours		if (!V_flag)			newimage/S=0 referencefordivision			dowindow/c contours		endif	else		dowindow/F $windowname	endif			printf "contour montage from %g ms to %g ms on movie %s with threshold %d stdevs\r", start, stop,moviename,SDlevel	WAVE movie = $moviename	WAVE colors	NVAR timeresolution, prestimsdev		moviedims(movie)	NVAR height,width, length		Variable startframe = (start - dimoffset(movie,2))/timeresolution	Variable stopframe = (stop - dimoffset(movie,2))/timeresolution	increment = increment/timeresolution		String name = NameOfWave(movie)		Variable i	String ms, framename	// not sure why these round statements are necessary, but without them the for loop doesn't work right	//	when time resolution is less than 1 (untested with other time resolutions)	startframe = round(startframe)	stopframe = round(stopframe)	increment = round(increment)		// first contour number to use	Variable contournumber = itemsinlist(contournamelist(winname(0,1),";"))		for (i = startframe; i <= stopframe; i += increment)					if (timeresolution < 1)			framename =  moviename + "_" + num2str(i) +"frm"		else			framename =  moviename + "_" + num2str(i*timeresolution + dimoffset(movie,2)) +"ms"		endif		//print i		if (!Exists(framename))			make/o/n=(height,width) $framename = movie[p][q][i]			setscale/p x, dimoffset(movie,0),dimdelta(movie,0), $framename			setscale/p y, dimoffset(movie,1),dimdelta(movie,1), $framename		endif		wave frame = $framename				appendmatrixcontour/l/t $framename		// this contour will be the most recently added one		//lastcontour = (itemsinlist(tracenamelist("",";",2)) - 1)		//print lastcontour		modifycontour ''#(contournumber) manlevels = {SDlevel*prestimsdev,0,1}, rgbLines=(65535,0,0),labels=0		contournumber += 1		endfor	printf "contour made from %s with isoline at %f\r", moviename,SDlevel*prestimsdev	killaxes()end// kills the color scale called text0 in all windows containing "map_w" in their namesFunction killcolorscales ()	string maplist = WinList("*map_w",";","WIN:1")	Variable i = 0	do		dowindow/f $(stringfromlist(i,maplist))		ColorScale/K/N=text0		i += 1		while (i < Itemsinlist(maplist))end// brings to the front all windows containing summonstringFunction summon (summonstring)	string summonstring	string maplist = WinList("*"+summonstring+"*",";","WIN:1")	Variable i = 0	do		dowindow/f $(stringfromlist(i,maplist))		i += 1	while (i < Itemsinlist(maplist))	end// makes an axis scale manualfunction axismanual (axisname)	string axisname		getaxis/Q $axisname	setaxis $axisname V_min, V_max		end	// handy linekillwindows("*372msfr*");killwindows("*368msfr*");killwindows("*364msfr*");killwindows("*300msfr*");killwindows("*304msfr*");killwindows("*308msfr*");killifcontains("baselineimage");// dammit I know I wrote this beforeFunction killwindows (matchstring)	string matchstring		string thelist = winlist(matchstring,";","")	variable nitems = itemsinlist(thelist),i	for (i=0; i < nitems; i += 1)			dowindow/k $(stringfromlist(i,thelist))	endfor		printf "killed %d windows\r",iend// kill all windows containing tablesFunction killtables ()	string thelist = winlist ("*",";","WIN:2")	variable nitems = itemsinlist(thelist),i	for (i=0; i < nitems; i += 1)			dowindow/k $(stringfromlist(i,thelist))	endfor		printf "killed %d table windows\r",iend// dammit I know I wrote this beforeFunction nomargin (matchstring)	string matchstring		string thelist = winlist(matchstring,";","")	variable nitems = itemsinlist(thelist),i	for (i=0; i < nitems; i += 1)			dowindow/f $(stringfromlist(i,thelist))		modifygraph margin = -1	endfor	end// kill all windows containing an image named matchstringFunction killifcontains (matchstring)	string matchstring	string biglist = winlist ("*",";","WIN:1")	string imagelist	variable nitems = itemsinlist(biglist),i	variable kills = 0	for(i=0;i < nitems; i += 1)			imagelist = imagenamelist(stringfromlist(i,biglist),";")		if (whichlistitem(matchstring,imagelist) != -1)			dowindow/k $(stringfromlist(i,biglist))			kills += 1		endif	endfor	printf "killed %d windows containing the image %s\r", kills, matchstringend// kill all waves containing matchstringFunction killmatch (matchstring)	string matchstring	string biglist = wavelist (matchstring,";","")	executecmdonlist("killwaves/z %s",biglist)	//printf "killed %d waves containing %s in their names\r", itemsinlist(biglist), matchstringend// modifies the second image in all windows matching matchstring to use the same colorwaveFunction commoncolors (colorwave, matchstring)	wave colorwave	string matchstring	string windowlist = WinList(matchstring,";","WIN:1")	Variable i = 0	string nextwindow		do		nextwindow = stringfromlist(i,windowlist)		modifyimage/W=$nextwindow ''#1 cindex=colorwave		i += 1	while (i < Itemsinlist(windowlist))end// dammit I know I wrote this beforeFunction executeonwindows (command, matchstring)	string command, matchstring		string thelist = winlist(matchstring,";","")	variable nitems = itemsinlist(thelist),i	for (i=0; i < nitems; i += 1)				Execute (command + " " + stringfromlist(i,thelist))		endforend// execute the command on all windows matching matchstringFunction DoOnMatchingWindows (command, matchstring)	string matchstring, command	string thelist = winlist(matchstring,";","")	variable nitems = itemsinlist(thelist),i	for (i=0; i < nitems; i += 1)			dowindow/f $(stringfromlist(i,thelist))		execute command	endforend// clear the drawing layer on all windows matching stringFunction cleardrawlayer (matchstring)	string matchstring	string thelist = winlist(matchstring,";","")	variable nitems = itemsinlist(thelist),i	for (i=0; i < nitems; i += 1)			dowindow/f $(stringfromlist(i,thelist))		setdrawlayer/k progfront		endforend// modifygroupaxisFunction modifygroupaxis (matchstring)	string matchstring	string thelist = winlist(matchstring,";","")	variable nitems = itemsinlist(thelist),i	for (i=0; i < nitems; i += 1)			dowindow/f $(stringfromlist(i,thelist)) 		SetAxis bottom 0,-0.002 ;SetAxis left 0,-0.002 	endforendFunction movielistfromgraph (name)	string name		setdatafolder root:	string tracestring =  tracenamelist("",";",1)	Variable numtraces = itemsinlist(tracestring),i,tracenumber	make/O/n=(numtraces) $name	WAVE ongraph = $name			for (i =0; i < numtraces; i += 1)			tracenumber = getmvnumber(stringfromlist(i,tracestring))		ongraph[i] = tracenumber		endforend// this function subtracts frames from movie2 from movie1, with movie2 shifted by offset (frames must exist already) Function framesubtraction (movie1,movie2, movie1start, movie1stop, framesuffix, movie2offset)	wave movie1,movie2	variable movie1start, movie1stop, movie2offset	string framesuffix		NVAR timeresolution	string framename	variable i		for (i= movie1start; i <= movie1stop;  i += timeresolution)			String movie1framename = ("root:"+nameofwave(movie1)+":"+nameofwave(movie1)+ "_" + num2str(i) + "ms" + framesuffix)		WAVE movie1frame = $(movie1framename)		String movie2framename = ("root:" +nameofwave(movie2) + ":"+nameofwave(movie2) +"_"+ num2str(i+movie2offset) + "ms"+ framesuffix)		WAVE movie2frame = $(movie2framename)				framename = ("root:"+nameofwave(movie1)+":"+nameofwave(movie1)+ "_" + num2str(i) + "ms" + "sub")		duplicate/o movie1frame $framename		WAVE newframe = $framename			newframe = movie1frame - movie2frame		printf "%s = %s - %s\r", framename, movie1framename, movie2framename			string windowname = nameofwave(movie1) +"_" + num2str(i)+"ms"+"sub" + "_w"		dowindow/f $windowname		if (!V_flag)			newimage/s=0 referencefordivision			appendimage/l/t newframe			modifyimage ''#1 cindex=colors,minRGB=nan, maxRGB=Nan			dowindow/c $windowname		endif		endfor	end// this function adds frames from movie2 to movie1, with movie2 shifted by offset (frames must exist already) Function frameaddition (movie1,movie2, movie1start, movie1stop, framesuffix, movie2offset)	wave movie1,movie2	variable movie1start, movie1stop, movie2offset	string framesuffix		NVAR timeresolution	string framename	variable i		for (i= movie1start; i <= movie1stop;  i += timeresolution)			String movie1framename = ("root:"+nameofwave(movie1)+":"+nameofwave(movie1)+ "_" + num2str(i) + "ms" + framesuffix)		WAVE movie1frame = $(movie1framename)		String movie2framename = ("root:" +nameofwave(movie2) + ":"+nameofwave(movie2) +"_"+ num2str(i+movie2offset) + "ms"+ framesuffix)		WAVE movie2frame = $(movie2framename)				framename = ("root:"+nameofwave(movie1)+":"+nameofwave(movie1)+ "_" + num2str(i) + "ms" + "add")		duplicate/o movie1frame $framename		WAVE newframe = $framename			newframe = movie1frame + movie2frame		printf "%s = %s + %s\r", framename, movie1framename, movie2framename			string windowname = nameofwave(movie1) +"_" + num2str(i)+"ms"+"add" + "_w"		dowindow/f $windowname		if (!V_flag)			newimage/s=0 referencefordivision			appendimage/l/t newframe			modifyimage ''#1 cindex=colors,minRGB=nan, maxRGB=Nan			dowindow/c $windowname		endif		endfor	end// quick little wrapper for display of listFunction displaymatch ()		string stringtomatch	prompt stringtomatch, "display traces matching"	doprompt "enter string", stringtomatch	if (V_flag)		abort	endif		dowindow/f displaymatch_w	if (!V_flag)		display/W=(0,44,500,498);	endif	cleartraces()		executecmdonlist("appendtograph %s", wavelist(stringtomatch,";",""))	offsetgene(xoffset=0,yoffset=-0.001)	dowindow/c displaymatch_w	printf "displayed traces matching %s\r", stringtomatch	end// uses suffix and movienumber and the strings in selectwave to build a list of traces to appendFunction appendselect (suffix, movienumber, selectwave)		string suffix	wave/t selectwave	variable movienumber	string tracename,nexttracename	variable numtraces = numpnts(selectwave),i	string prefix = getExperimentID(getdatafolder(0))	for (i=0; i < numtraces; i += 1)		nexttracename = prefix + "mv" + num2str(movienumber) + selectwave[i] + suffix		appendtograph/W=$(suffix+"50select") $nexttracename			endforendFunction colorizetracesbyLUT (lookup)	WAVE lookup	string traces = tracenamelist("",";",1), nexttrace	variable numtraces = itemsinlist(traces),i	for (i=0; i < numtraces ; i+= 1)			nexttrace = stringfromlist(i,traces)		modifygraph rgb($nexttrace)=(lookup[i][0],lookup[i][1],lookup[i][2])	endforendFunction thicktracesbyLUT (lookup)	WAVE lookup	string traces = tracenamelist("",";",1), nexttrace	variable numtraces = itemsinlist(traces),i	for (i=0; i < numtraces ; i+= 1)			nexttrace = stringfromlist(i,traces)		modifygraph lsize($nexttrace)=(lookup[i])	endforend// appends error bars to any "avg" waves in the top graph// assumes that the error wave names are the same as the avg wave names but with $type instead of "avg"Function DoErrorBars(type)	String type	String tracenames = TraceNameList("",";",1)		// sometimes the error wave template names will be the same as the tracenames,	// but on polar graphs they will not be	String errorwavetemplatenames = tracenames	String next_error_template, next_trace			// is the graph polar?	Variable GraphIsPolar = WMPolarIsPolarGraph(WinName(0,1))	if (graphispolar)		// the info for this polar graph is located in a subdirectory of Packages which can be found in the annotation		String polardirectoryname = StringByKey("TEXT",  annotationinfo("","polarGraphSettings"))		WAVE/T polarTracesTW = $("root:Packages:WMPolarGraphs:"+polardirectoryname+":polarTracesTW")		make/O/T/n=(dimsize(polarTracesTW,0)) polarsourcewaves = polarTracesTW[p][4]		// for polar graphs the error wave template names are not the same as the trace names		errorwavetemplatenames = listfromtextwave(polarsourcewaves)		// for polar graphs there is an extra hidden scaling trace which doesn't receive error bars		tracenames = removefromlist("polarAutoscaleTrace",tracenames)		killwaves polarsourcewaves	endif		variable numtraces = itemsinlist(tracenames),i	for (i=0; i < numtraces; i += 1)			next_trace = StringFromList(i, tracenames)		next_error_template = Stringfromlist(i,errorwavetemplatenames)		if (stringmatch(next_error_template,"*avg*"))			ErrorBars/T=0.5/L=0.5 $(next_trace) Y,wave=($replacestring("avg",next_error_template,type), $replacestring("avg",next_error_template,type))		else			printf "no matching error wave found for trace %s\r", next_trace		endif			endforend// set size for all graphs on a layout Function gs ([height, width])	Variable height, width		if (ParamIsDefault(height))		Prompt height, "desired height in points"		Prompt width, "desired width in points"		DoPrompt "enter info",height, width	endif			String layoutname		layoutname = ""		Variable index	String info	String type,name	String indexStr	String objectTypeStr	String graphNameStr		index = 0	do		sprintf indexStr, "%d", index		info = LayoutInfo(layoutName, indexStr)		if (strlen(info) == 0)			break			// No more objects		endif		type = StringByKey("TYPE", info)		name = StringByKey("NAME", info)		if (!cmpstr(type,"Graph"))						ModifyLayout width($name)=width,height($name)=height		endif		index += 1	while(1)End// layoutwindow name has a bunch of 2D displays in it//	scale them so that their pixels are a constant size, and square//  10 size units per pixel is a good guess//   and let's also tile them over a subarea of the layout.//	size of the subarea depends on the dimensions of the graphs.  this Function scalematrixlayout (layoutwindowname, sizefactor, groutfactor)	string layoutwindowname	variable sizefactor, groutfactor		// list all graphs in layout	// make lists of the various items in the layout.  	// Rick Gerkin, Igorexchange		variable i=0,j,k,d	string types="Graph;Textbox"	make/FREE/t/n=(itemsinlist(types)) items=""	do		string info=LayoutInfo(layoutwindowname,num2str(i))		string type=stringbykey("TYPE",info)		string name=stringbykey("NAME",info)		variable typeNum=whichlistitem(type,types)		if(typeNum>=0)			items[typeNum]+=name+";"		endif		i+=1	while(strlen(info))		// now items[0] should contain a graph list	variable numgraphobjects = itemsinlist(items[0])	string nextgraphobject	variable height, width	// go through the list		string layinfo  = layoutinfo("","Layout")	string cmd = ""	for (i=0; i < numgraphobjects;i  += 1)			nextgraphobject = stringfromlist(i,items[0])				// look up the first image on each graph		WAVE nextimage = imagenametowaveref(nextgraphobject,stringfromlist(0,imagenamelist(nextgraphobject,";")))				// get its dimensions		height = dimsize(nextimage,0)		width = dimsize(nextimage,1)			// set that image to be sizefactor*dimsize(0), sizefactor*dimsize(1)		modifylayout height($nextgraphobject) = sizefactor*width, width($nextgraphobject)=sizefactor*height						// get PAGE coordinates to use as base for tile area						// tileimages with specified groutfactor, without resizing		string pagestring = StringByKey("PAGE",layinfo)		Variable pageleft = str2num(stringfromlist(0,pagestring,","))		Variable pagetop =  str2num(stringfromlist(1,pagestring,","))				// assume it's 2x4 layout objects for now		Variable rightcoord = pageleft+4*groutfactor+3*height*sizefactor		Variable bottomcoord = pagetop + 4*groutfactor + 3*width*sizefactor				cmd = "Tile/A=(4,2)/G="+num2str(groutfactor)+"/W=("+num2str(pageleft)+","+num2str(pagetop)+","+num2str(rightcoord)+","+num2str(bottomcoord)+")"		//execute cmd	endfor	end// layoutwindow name has a bunch of 2D displays in it//	scale them so that their pixels are a constant size, and square//  10 size units per pixel is a good guess//   and let's also tile them over a subarea of the layout.//	size of the subarea depends on the dimensions of the graphs.  this //example m9 is 16x48, we want a size of 192x576// so that's 12 x 12 points per pixelFunction scaletopixelsize (objectname, pointsperpixel)	string objectname	variable pointsperpixel		// list all graphs in layout	// make lists of the various items in the layout.  	// Rick Gerkin, Igorexchange		WAVE theImage = imagenametowaveref(objectname,stringfromlist(0,imagenamelist(objectname,";")))			// get its dimensions	variable height = dimsize(theImage,0)	variable width = dimsize(theImage,1)		// set that image to be sizefactor*dimsize(0), sizefactor*dimsize(1)	modifylayout height($objectname) = width*pointsperpixel, width($objectname)=height*pointsperpixel		end