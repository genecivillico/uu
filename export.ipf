#pragma rtGlobals=1		// Use modern global access method.// AssembleQTMovieFunction AssembleQTMovie (from, to, markers, [mouse])	Variable from, to,mouse	WAVE markers		SVAR current = root:currentmovie	String moviename = current	NVAR timeresolution		// collect image display properties from top graph	// not implemented yet!	//String topgraphinfo = ImageInfo		// /F=5 is a good frame rate	newmovie/L/F=20		// convert from and to to frames	from = round(from/ timeresolution)	to = round(to/timeresolution)		// convert markers to times in cut movie	//markers -= from		String framelabel, windowname	WAVE movie = $moviename	WAVE colors	Variable i	Variable nframes = (to - from) + 1		moviedims(movie)	NVAR height,width	Make/O/N=(height,width) dummyframe	if (WaveExists(dummy))		KIllwaves dummy	endif		Variable nextspot = 0	print from, to	for (i = from; i <= to; i += 1)		//print i		framelabel = num2str( i * timeresolution) + " " + WaveUnits(movie,2)		//print framelabel		dummyframe = movie[p][q][i]		Display /W=(63,50,406,443)		DoWindow/C dummy		if (Exists("twophoton") != 2)			AppendImage/L/T referencefordivision		endif		AppendImage/L/T dummyframe		ModifyGraph margin=-1		SetAxis/A/R left		// assign the image whatever display properties were collected from the top graph		// not implemented yet!		//ModifyImage dummyframe cindex=::mv2004:colors,minRGB=NaN,maxRGB=NaN		//ModifyImage dummyframe ctab= {*,200,YellowHot,0}, minRGB=NaN, maxRGB=NaN		//SetAxis top 28,127.5				// for mv2		//ModifyImage dummyframe ctab= {*,200,Grays,0}				// for mv1		//ModifyImage dummyframe ctab= {200,1500,Grays,0}				killaxes()				// barrels go on progfront layer		if (!paramisdefault(mouse))			windowname = winname(0,1)					//addbarrels(windowname,mouse)		endif				// so put everything else on userfront layer		SetDrawLayer UserFront		SetDrawEnv ycoord=rel,xcoord=rel,textrgb=(65535,65535,65535), fsize=24		DrawText 0.75, 0.1, framelabel		SetDrawEnv xcoord= top,ycoord= left,linethick= 5,linefgc=(0,0,0)		// for micam		//DrawLine 59.6240148553973,55.0775934305345,81.1781549827859,55.0775934305345		// for scanimage		//DrawLine 5,120,25,120		ModifyImage ''#0 ctab= {0,201,Grays,0}				Variable laststim 		Variable numstims = numpnts(markers)				if (numstims > 1)			laststim = markers[numpnts(markers)- 1]		else			laststim = 1000000		endif		// markers tells what times to put a stimulus marker		if ((nextspot <= (numstims-1)) && (i*timeresolution > markers[nextspot] - 0.1) && (i*timeresolution < markers[nextspot] + 0.1))			print "marker"			nextspot += 1			setdrawlayer UserFront			SetDrawEnv fillfgc=(65535,0,0), linefgc=(65535,0,0)			setdrawenv xcoord=rel,ycoord=rel			DrawRect 0.849537037037037,0.724137931034483,0.965277777777778,0.874608150470219						//abort		endif					DoUpdate				AddMovieFrame				DoWindow/K dummy			endfor	CloseMovieend// AssembleQTMoviehisto//  		this one makes use of a histology picture//// must be preceded by a NewMovie commandFunction AssembleQTMoviehisto ()			String moviename	Prompt moviename, "3D matrix containing movie", popup, WaveList("*v*",";","")		DoPrompt "enter info", moviename	if (V_flag)		abort	endif		String framename	String ms	WAVE movie = $moviename	WAVE colors	NVAR timeresolution	Variable i	Variable nframes = DimSize(movie,2)		if (WaveExists(dummy))		KIllwaves dummy	endif		Variable nextspot = 0		make/o/n=(dimsize(movie,0),dimsize(movie,1)) dummyframe	setscale/p x, dimoffset(movie,0), dimdelta(movie,0), dummyframe	setscale/p y, dimoffset(movie,1), dimdelta(movie,1), dummyframe			for (i = 0; i < nframes; i += 1)				dummyframe = movie[p][q][i]		newimage root:histo		AppendImage/T/l dummyframe		DoWindow/C dummy		ModifyGraph margin(left)=14,margin(bottom)=14,margin(top)=14,margin(right)=14		ModifyGraph nticks(left)=4		ModifyGraph minor=1		ModifyGraph fSize=8		ModifyGraph standoff=0		ModifyGraph tkLblRot(left)=90		ModifyGraph btLen=3		ModifyGraph tlOffset=-2		ModifyImage dummyframe cindex= colors						ms = num2str(dimoffset(movie,2) + i * timeresolution) + " ms"		SetDrawLayer/K ProgFront		SetDrawEnv textrgb=(65535,65535,65535), fsize=14		DrawText 0.1, 1, ms				WAVE stimtimes		Variable laststim = stimtimes[numpnts(stimtimes)- 1]				if ((dimoffset(movie,2)+ i*timeresolution) == stimtimes[nextspot])						// stimtimes tells what times to put a stimulus marker				if (i*timeresolution <= laststim)					print "marker"					nextspot += 1					SetDrawEnv ycoord=abs, xcoord=abs					SetDrawEnv fillfgc=(0,65535,0)					DrawRect 257,126,319,197				endif			endif								DoUpdate				AddMovieFrame				DoWindow/K dummy			endfor	CloseMovieend// MakeQT//// automates several of the functions needed to go from raw .dml files to quicktime movies	Function MakeQT()	String framelist = WaveList("frame*",";","")	Variable nframes = ItemsInList(framelist)	Variable i	String framename	variable dml = 1		for (i = 0; i < nframes; i += 1)			framename = "frame" + num2str(i)		Redimension/N=(96,64) $framename			endfor	NVAR darklevel	//FixFramesStimNostim(1,16, darklevel,dml)	//FramesToMatrix(nframes, "movie")	end		// IgorToMatlab// 	takes a .dml file that has been loaded into Igor and puts it in a Matlab-friendly 4D matrix formatFunction IgorToMatlab (movie)	Wave movie		String newname = NameOfWave(movie) + "_mat"		// get dimensions of movie	// may need to be reversed as in igor image convention		Variable width = Dimsize(movie,0)	Variable height = Dimsize(movie, 1)	Variable depth = DimSize (movie, 2)		printf "input is %s with width %d height %d depth %d\r", NameOfWave(movie),width, height, depth		//make 4D matrix		Make/O/N=(width, height, 1, depth) $newname	WAVE matlabmatrix = $newname		matlabmatrix[][][0][] = movie[p][q][s]			endFunction savebatchtext (numberlist,where)	wave numberlist	string where	variable i,nmovies = numpnts(numberlist)	string name, filename		printf "saving text\r exported files will be missing first frame\r if first frame is not reference, then fix this!\r"	newpath textpath, where		for (i=0; i < nmovies; i += 1)				name = "mv" + num2str(numberlist[i])		setdatafolder $("root:" + name + ":")				duplicate/o $name $(name+"export")				// delete the first frame which is the reference image (this is dumb!)		deletepoints/m=2 0,1,$(name+"export")				//add extension		filename = name + ".txt"		Save/P=textpath/G $(name+"export") as filename		killwaves $(name+"export")			endforend// save all ibw in current DF to a path created to whereFunction savebatchibw (where)	string where		string waves = wavelist("*",";","")	variable nwaves = itemsinlist(waves),i	string name, filename		newpath ibwpath, where	Save/B/P=ibwpath wavesend// use "xxx" in place of ms numbersFunction framedump (prefix, nametemplate,start,stop,increment)	string prefix,nametemplate	variable start, stop, increment		string framename,filename, editstring	variable i		PathInfo framedump	if (!V_flag)		newpath framedump, "Glamdring:Users:work:Desktop:framedump:"	endif			for (i=start; i <= stop; i += increment)		framename = (replacestring( "xxx",nametemplate, num2str(i)))		print framename			editstring = (replacestring("xxx",nametemplate,  num2str(i)))		editstring = (replacestring("msfr_w", editstring, "ms"))				filename = prefix + editstring + ".tif"		//print filename				SAVEpict/B=5/E=-7/O/p=framedump/WIN=$framename as filename	endforend// select the pieces of the montage in the top layoutFunction dumpmontage (prefix)	string prefix	PathInfo framedump	if (!V_flag)		newpath framedump, "Mithrandir:Users:gene:Desktop:framedump:"	endif		string info = layoutinfo("","Layout"), nextframe,framename,filename		string names = stringbykey("SELECTED", info)	variable numobjects = itemsinlist(names,","),i		for (i=0; i < numobjects; i += 1)		nextframe = stringfromlist(i, names,",")		filename = prefix + (replacestring("msfr",nextframe,  "ms"))		filename = (replacestring( "_w",filename, ""))	+ ".tif"		SAVEpict/B=5/E=-7/O/p=framedump/WIN=$nextframe as filename	endforend// markers: a list of frames where we want a stimulus marker// trace_to_animate: a trace that will be displayed along with the movieFunction MakeQT_OMML (movie, from_frame, to_frame, [markers, trace_to_animate])	WAVE movie	Variable from_frame, to_frame	WAVE markers	WAVE trace_to_animate		String moviename = nameofwave(movie)			// collect image display properties from top graph	// not implemented yet!	//String topgraphinfo = ImageInfo		Variable to = to_frame	Variable from = from_frame		// /F=5 is a good frame rate	// /L flag is necessary for creating movie files on a Mac to be viewed in Windows quicktime	newmovie/I/F=10/L		String framelabel, windowname	WAVE movie = $moviename	Variable i	Variable nframes = (to - from) + 1	Variable height = dimsize(movie,0)	Variable width = dimsize(movie,1)		display	//ModifyImage ''#0  ctab= {-0.3,0.3,Rainbow,1}	//ModifyImage ''#0 ctab= {0,2000,Grays,0}	appendimage/l/t movie	// need a color table from ImageJ	ModifyImage ''#1 ctab= {0.5,1,Rainbow,1},minRGB=NaN,maxRGB=0		Variable secsperframe = 1	Variable nextspot = 0	for (i = from; i <= to; i += 1)		//print i		framelabel = num2str((i+1) * secsperframe) + " " + "sec"		modifyimage ''#1 plane=i				//print framelabel				// can use the below instead of Newimage/s=0		//				//AppendImage/l/t dummyframe		//ModifyGraph margin=-1		//SetAxis/A/R left		// assign the image whatever display properties were collected from the top graph		// not implemented yet!		//ModifyImage dummyframe cindex=::mv2004:colors,minRGB=NaN,maxRGB=NaN		//ModifyImage ''#1 cindex=color_firsthalf, minRGB=NaN, maxRGB=0		//ModifyImage ''#2 cindex=color_secondhalf, minRGB=0, maxRGB=NaN								// clear the userfront layer from before		SetDrawLayer/K UserFront				SetDrawLayer UserFront		SetDrawEnv ycoord=rel,xcoord=rel,textrgb=(65535,65535,65535), fsize=24		DrawText 0.75, 0.1, framelabel		SetDrawEnv xcoord= top,ycoord= left,linethick= 5,linefgc=(0,0,0)		// for micam		//DrawLine 59.6240148553973,55.0775934305345,81.1781549827859,55.0775934305345		// for scanimage		//DrawLine 5,120,25,120		// markers tells what times to put a stimulus marker		if ((nextspot < numpnts(markers)) && (i==markers[nextspot]))			print "marker"			nextspot += 1			setdrawlayer UserFront			SetDrawEnv fillfgc=(65535,0,0), linefgc=(65535,0,0)			setdrawenv xcoord=rel,ycoord=rel			DrawRect 0.849537037037037,0.724137931034483,0.965277777777778,0.874608150470219			//abort		endif					DoUpdate				AddMovieFrame				//DoWindow/K dummy			endfor	CloseMovieend// markers: a list of frames where we want a stimulus marker// trace_to_animate: a trace that will be displayed along with the movieFunction MakeQT_2013 (movie, from_frame, to_frame, dayspostimplant[markers, trace_to_animate])	WAVE movie	Variable from_frame, to_frame	WAVE markers	WAVE trace_to_animate	WAVE dayspostimplant		String moviename = nameofwave(movie)			// collect image display properties from top graph	// not implemented yet!	//String topgraphinfo = ImageInfo		Variable to = to_frame	Variable from = from_frame		// /F=5 is a good frame rate	// /L flag is necessary for creating movie files on a Mac to be viewed in Windows quicktime	newmovie/I/F=5/L		String framelabel, windowname	WAVE movie = $moviename	Variable i	Variable nframes = (to - from) + 1	Variable height = dimsize(movie,0)	Variable width = dimsize(movie,1)		display/W=(209,115,626,505)	//ModifyImage ''#0  ctab= {-0.3,0.3,Rainbow,1}	//ModifyImage ''#0 ctab= {0,2000,Grays,0}	appendimage/l/t movie	// need a color table from ImageJ	ModifyImage ''#0 ctab= {0,50,YellowHot,0}	modifygraph margin=-1		Variable secsperframe = 1	Variable nextspot = 0	for (i = from; i <= to; i += 1)		//print i		framelabel = num2str(dayspostimplant[i]) + " " + "days"		modifyimage ''#0 plane=i				//print framelabel				// can use the below instead of Newimage/s=0		//				//AppendImage/l/t dummyframe		//ModifyGraph margin=-1		//SetAxis/A/R left		// assign the image whatever display properties were collected from the top graph		// not implemented yet!		//ModifyImage dummyframe cindex=::mv2004:colors,minRGB=NaN,maxRGB=NaN		//ModifyImage ''#1 cindex=color_firsthalf, minRGB=NaN, maxRGB=0		//ModifyImage ''#2 cindex=color_secondhalf, minRGB=0, maxRGB=NaN								// clear the userfront layer from before		SetDrawLayer/K UserFront				SetDrawLayer UserFront		SetDrawEnv ycoord=rel,xcoord=rel,textrgb=(65535,65535,65535), fsize=24		DrawText 0.75, 0.1, framelabel		SetDrawEnv xcoord= top,ycoord= left,linethick= 5,linefgc=(0,0,0)		// for micam		//DrawLine 59.6240148553973,55.0775934305345,81.1781549827859,55.0775934305345		// for scanimage		//DrawLine 5,120,25,120		// markers tells what times to put a stimulus marker		if ((nextspot < numpnts(markers)) && (i==markers[nextspot]))			print "marker"			nextspot += 1			setdrawlayer UserFront			SetDrawEnv fillfgc=(65535,0,0), linefgc=(65535,0,0)			setdrawenv xcoord=rel,ycoord=rel			DrawRect 0.849537037037037,0.724137931034483,0.965277777777778,0.874608150470219			//abort		endif					DoUpdate				AddMovieFrame				//DoWindow/K dummy			endfor	CloseMovieendFunction animate_trace (trace, stim)	WAVE trace, stim		Variable i, length=numpnts(trace)	// /F=5 is a good frame rate	// /L flag is necessary for creating movie files on a Mac to be viewed in Windows quicktime	//newmovie/I/L/F=60		Duplicate/o trace trace_animate	redimension/D trace_animate	trace_animate = NaN		Wavestats/q trace	Display trace_animate	Setaxis left V_min,V_max	modifygraph rgb=(0,0,0), lsize=0.5	string filename		for (i=0; i < length; i += 1)			trace_animate[i] = trace[i]				if (stim[i] > 8)			SetDrawLayer/K UserFront			SetDrawEnv linefgc= (65280,0,0),fillfgc= (65280,0,0)			DrawRect 0.902777777777778,0.004739336492891,0.99537037037037,0.199052132701422				else			SetDrawLayer/K UserFront		endif				doupdate				filename = "animate"+num2str(i)		SavePICT/P=dump/E=-7/B=72 as filename		//wait(0.5)		print i		//addmovieframe	endfor		//CloseMovie	end