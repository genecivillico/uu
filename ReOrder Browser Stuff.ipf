#pragma rtGlobals=1		// Use modern global access method.//   "ReorderBrowser" writes names of objects in current folder into a graph window as//    text boxes. User drags names to new order (2nd column comes after 1st column, etc.)////   User then clicks on button "Done" that reorders objects in current folder according //   to updated graph window.////   9/3/96 Mike Johnson (mike-johnson@llnl.gov)Menu "Macros"  // Remove or change this line if you do not want new entry in Macros menu	"(-"	"ReorderBrowserStuff"	help = {"Creates window display of objects in current folder. User can drag names to new order."}	"(-"endProc ReorderBrowserStuff(objIndx) // dummy Procedure to get popup prompts, set global variables	Variable objIndx // 1=>waves, 2=>numeric variables, 3=>strings, 4=>data folders, 5=>All types	Prompt  objIndx,"Reorder these objects in current folder \""+PossiblyUnquoteName(GetDataFolder(0))+"\" in data browser:",popup "Waves;"	"Numeric variables;Strings;Data folders;_All types_"	Silent 1; PauseUpdate	If( strlen(WinList("ObjectList", ";", "WIN:1")) != 0)		Abort "Window \"ObjectList\" already exists; use it or delete it and \"root:majReorderFolder\"."	endif	If((objIndx < 1) %| (objIndx > 5))		Abort "Argument must be in range 1 to 5"	endif	String savFldr = GetDataFolder(1)  // save name of folder to be reordered	If(DataFolderExists("root:majReorderFolder"))  // temporary folder for storage		SetDataFolder root:majReorderFolder	else		NewDataFolder/S root:majReorderFolder	endif	NewDataFolder/O subFolder  // temporary subfolder to store moved objects	Variable/G majReorderIter1 = objIndx, majReorderIter2 = objIndx	String/G majSavedFldr = savFldr	If(objIndx == 5)  //  will be doing loop over all types of objects		majReorderIter1 = 1; majReorderIter2 = 5	endif	SetDataFolder $savFldr	FReorderBrowser(objIndx)endFunction  FReorderBrowser(objIndx) // main program	Variable objIndx 		//objlndx= 1  // 1=>waves, 2=>numeric variables, 3=>strings, 4=>data folders, 5 => all	Silent 1; PauseUpdate	String  cFldr, boxName, objType, msg, moveComm	String tempFldr = "root:majReorderFolder"	String subFldr = "root:majReorderFolder:subFolder"	Variable top, left, j, n, winWid, winHt, boxHt=60, colWid	Variable maxObj = 20 // maximum number of objects per column, OK to change	Variable minWid = 240 // minimum width of window to be made	NVAR iter1 = root:majReorderFolder:majReorderIter1	NVAR iter2 = root:majReorderFolder:majReorderIter2	SVAR savfldr = root:majReorderFolder:majSavedFldr		SetDataFolder $savFldr	cFldr = GetDataFolder(0)	SetDataFolder $tempFldr	Variable/G numObj, xLine, numCol,objIndex	Make/O/T/N=4 majReOrderType = {"Wave", "Variable", "String", "DataFolder"}		If(objIndx == 5) // first time through doing all types		objIndx = 1	endif	numObj= CountObjects(savFldr,objIndx)	objIndex = objIndx			If((objIndx==4) %& (cmpstr(cfldr,"root")==0))  //  do not show root:majReorderFolder		numObj -= 1	endif	objType = majReOrderType[objIndx-1] // put type name in string	If(numObj <= 1)  // nothing to reorder		sprintf msg, "There are not enough %ss in the data folder ", objType		msg += "\"" +PossiblyUnquoteName(cfldr) + "\" to reorder."		DoAlert 0, msg		iter1 += 1		If(iter1 < iter2)			sprintf moveComm "FReorderBrowser("+num2istr(iter1)+")"			execute moveComm			return 0		else			SetDataFolder $savFldr			KillDataFolder $tempFldr			Abort		endif	endif  // skipped back to top of function or quit because nothing to reorder	Make/O/T/N=(numObj)  majReOrderObj   //  will contain names of objects to reorder		j = 0   // make list of objects and find longest name	Do   		majReOrderObj[j] = GetIndexedObjName(savFldr,objIndx,j)		colWid = max(colWid, FontSizeStringWidth("Geneva",10,0,(majReOrderObj[j])))		j += 1	While(j < numObj)	colWid += 12 //  add 12 pixels for column margins	maxObj = min(maxObj, numObj) // make window no taller than necessary	numCol = ceil(numObj/maxObj)	winWid = numCol*colWid	winWid = max(winWid, minWid)	colWid = winWid/numCol	winHt = 24+boxHt+maxObj*12  // 12 pixels height per name	Display/W=(25,40,(25+winWid),(40+winHt))	DoWindow/C ObjectList  //  made and named a graph window to hold names	n = 0 // draw textboxes containing object names	Do   		boxName = "box" + num2istr(n)		top = 100*((boxHt+6)/winHt+mod(n,maxObj)*(1-boxHt/winHt)/(maxObj+1))		left = 100*(6+colWid*floor(n/maxObj+0.01))/winWid		TextBox/F=0/A=LT/N=$boxName/X=(left)/Y=(top) "\\F\'Geneva\'\\Z10"		AppendText majReOrderObj[n]		n += 1	While(n < numObj) // finished draw textboxes		xLine = 1/numCol   // set column boundary as fraction of window width	SetDrawLayer ProgBack	SetDrawEnv linethick= 2, save		n = 1  //  draw vertical lines between columns	Do		DrawLine (n*xLine),0,(n*xLine),1		n += 1	While(n < numCol)		SetDataFolder $savFldr // finished using variables in temporary folder		Textbox/F=0/B=1/A=LT/X=(900/winWid)/Y=(900/winHt)"\\Z12\\K(1,3,39321)"	AppendText "\\F'Helvetica'Drag "+objType +" names to"	AppendText "new order, then click on \"Done\".\r(Enlarge this window if desired.)"	Button DoneButton,pos={184,6},size={50,20},proc=ReOrderObjectDone,title="Done"	Button DoneButton,help={"Click here after dragging objects to new order."}	Button HelpButton,pos={213,32},size={21,20},proc=ReOrdeObjHelp,title="?"	Button HelpButton,help={"Click here for detailed help message."}	SetDrawLayer ProgBack // Get set to draw blue rectangle behind green rectangle	SetDrawEnv linethick= 0,linefgc= (65535,65535,65535),fillfgc= (0,0,65535)	DrawRRect (3/winWid),(3/winHt), 1,((boxHt+3)/winHt) // blue rectangle in back	SetDrawEnv linethick= 1,linefgc= (0,0,65535),fillfgc= (49163,65535,32768)	DrawRRect 0,0,(1-2/winWid),(boxHt/winHt)  // green rectangle in front	SetDrawLayer UserFrontendFunction ReOrderObjectDone(ctrlName) : ButtonControl	String ctrlName	Silent 1; PauseUpdate	NVAR iter1 = root:majReorderFolder:majReorderIter1	NVAR iter2 = root:majReorderFolder:majReorderIter2	SVAR savFldr = root:majReorderFolder:majSavedFldr	String tempFldr = "root:majReorderFolder"	String subFldr = "root:majReorderFolder:subFolder:"	If( ! DataFolderExists(tempFldr))		DoWindow/K ObjectList		Abort "Can't find temporary folder used for reorder"	endif	SetDataFolder $tempFldr	DoWindow/F ObjectList  // bring window to front	String boxCoord, moveComm, boxName, listWn, objType	Variable xStrPos, yStrPos,scPos,n	NVAR numObj = numObj, xLine = xLine, objIndex = objIndex	WAVE/T majReOrderObj = majReOrderObj	WAVE/T majReOrderType= majReOrderType	Make/O/T/N=(numObj) majReOrderObj  //  does not exist at compile time	Make/O/T/N=4 majReOrderType //  does not exist at compile time	Make/O/N=(numObj) majboxObjX, majboxObjY	n = 0 //  find out where user dragged names to	Do   		boxName = "box"+num2istr(n)		boxCoord = AnnotationInfo("ObjectList", boxName)		xStrPos = strsearch(boxCoord, "/X=", 0) +3		yStrPos = strsearch(boxCoord, "/Y=",xStrPos) + 3		scPos = strsearch(boxCoord, ";", yStrPos)		majboxObjX[n] = str2num(boxCoord[xStrPos,(yStrPos-3)])		majboxObjY[n] = str2num(boxCoord[yStrPos, (scPos-1)])		n += 1	While(n < numObj)	objType = majReOrderType[objIndex -1]	majboxObjX = floor(majboxObjX / xLine/100)   // find which column name is in	majboxObjY += 200*majboxObjX   // add big offset for column location	Sort majboxObjY, majReOrderObj  // put names in new order	n = 0  //  move objects in new order to temporary folder	Do   		listWn = PossiblyQuoteName(majReOrderObj[n])		sprintf moveComm, "Move%s %s%s, %s", objType, savFldr,listWn,subFldr		Execute moveComm		n += 1	While(n < numObj)	n = 0  //  move objects back to original folder	Do   		listWn = PossiblyQuoteName(majReOrderObj[n])		sprintf moveComm, "Move%s %s%s, %s", objType,subFldr, listWn,savFldr		Execute moveComm		n += 1	While(n < numObj)	SetDataFolder savFldr // back to original data folder	DoWindow/K ObjectList	iter1 += 1	If(iter1 < iter2)		sprintf moveComm "FReorderBrowser("+num2istr(iter1)+")"		execute moveComm	else		KillDataFolder $tempFldr	endifendFunction ReOrdeObjHelp(ctrlName) : ButtonControl	String ctrlName	String str	str = "Order of objects is top down in a column, then left to right by column. "	str += "Upper left corner of name determines position. "	str += "Horizontal position between column boundaries does not matter."	DoAlert 0, strEndFunction/S PossiblyUnquoteName(name)	String name	If(cmpstr(name[0],"'") == 0)		name = name[1,strlen(name)-1]	endif	If(cmpstr(name[strlen(name)-1],"'") == 0)		name = name[0,strlen(name)-2]	endif	return nameend